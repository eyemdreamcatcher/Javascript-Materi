<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Learn Javascript</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-Zenh87qX5JnK2Jl0vWa8Ck2rdkQ2Bzep5IDxbcnCeuOxjzrPF/et3URy9Bv1WTRi" crossorigin="anonymous">
</head>
<style>
.container {
    outline: dashed 1px yellowgreen;
    }

.row {
    height: 120px;
    background-image: linear-gradient(#E9B7CE, #D3F3F1);
}
</style>

<body>
<div class="container">

 <div class="row align-items-center border">
    <p class="text-center">Learn Javascript</p>
 </div>
 <script> /* destructure array
  {const names = ["abdul", "budi", "cahya", "reza", "zaki"];
  const [firstName, middleName, lastName, ...others] = names;

  console.info(firstName);
  console.info(middleName);
  console.info(lastName);
  console.info(others);
 }
*/
 /*komentar lebih 
 dari 1 baris
 
 document.writeln untuk menampilkan tulisan di halaman
 */
 {

    document.writeln('hello word');
 }


 /* tipe data number: bilangan bulat, desimal, pecahan. di javascript semua disatukan.
 number tidak berlu diberikan ''.
 document.writeln(100);

 tipe data number
 number notation:
 hexadecimal : 0xFF
 binary: 0b10101
 Octal: 0o10
 */
 {
document.writeln('<br>');
document.writeln(0xFF11);
document.writeln('<br>');
 }

 /*
 tipe data boolean:
 data kebenaran, true atau false.
 akan banyak digunakan di pemrorgraman.
 */

 {
document.writeln( true );
document.writeln( false );
 }

 /*
 Tipe data string:
 membuat data string perlu menggunakan petik 2 atau 1 "",''
 */
{
    document.writeln('wlf');
    document.writeln("IT specialist");
}

// menambah string menggunkan operator +
{
    document.writeln('<br>');
    document.writeln('Nama :' + 'wlf');
    document.writeln('<br>');
}

/*
escape sequance:
\n = enter
\t = TAB
\' = '
\" = "
\\ = \
*/

{
    document.writeln('nama\\wlf \"jakarta\"');  
}

/*
variable: tempat utk menyimpan data.
data yang ada di variable bisa digunakan kembali dengan menggunakan variablenya dengan kata kunci var.
*/
{
var fullName;
var firstName;
var lastName;
}

/*
mengubah value variable
*/

{
    var fullName;
    fullName = 'Wildan Fajri';
//data akan berhenti disini 
    fullName = 'Eko Kun';

    fullName = 'Kurniawan';
}

// mengakses variable

{
    document.writeln(fullName);
    document.writeln('<br>');
}

/*
kata kunci let dan const.
sblm tahunn 2015 menggunakan var. Sekarang semuanya menggunakan let dan const.
*/
{
    let firstName='Budi';
    let lastName='Anduk';
    document.writeln(firstName + '<br>' + lastName);
}

/*kata kuinci conts. constant
variable const tidak dapat diubah lagi sangat berbeda dengan var atau let.
*/
{
    const application='game generator';
   /* const application='generator';
    variable const akan error jika dirubah.
   */

    document.writeln(application);
}

/* operator matematika
operator Aritmatika:
+,-,*,**(exponensial/pangkat exp: 1**2,1**10), /, %(sisa bagi)
*/

{
    let result = 1+2;
    document.writeln('<br>1+2=' + result);
    let originalResult=result;

    result = result - 1;
    document.writeln('<br>'+ originalResult + '-1='+ result);
}

/*
operator augmented assignments.
opeprator matematika
result = result + 10 jika menggunakan augmented maaka: result+= 10
*/
{
    document.writeln('<br>');
    let result= 1;

    result+= 1;
    document.writeln(result);
}

/*
operator unary: oeprator yang cukup membutuhkan 1 data.
++ adalah increment: menaikan 1 angka.
-- adalah decrement.
*/
{
    let result = +1;
    document.writeln('<br>' + result);

    result++;
    document.writeln('<br>' + result);
}

/*
Operasi/operator Perbandingan.
adalah operasi untuk membandingkan 2 buah data.
operasi perbandingan adalah operasi yang menghasilkan nilai boolean (benar atau salah).
>,<,>=,<=,==,===,!=,!==.
*/
{
    let result = 5 ==="5";
    let result2 = 5 =="5";
    document.write('<br>'+result);
    document.writeln(result2 + '<br>');
}

/*
operator logika: operator untuk 2 buah data boolean.
hasil dari operator logika adalah boolean lagi.
&& dan, || atau, ! kebalikan.

operator && jika ada false di 2 data maka hasilnya false.

operator || jika ada true di 2 data maka hasilnya true.

operator unery ! (digunakan untuk satu data)
! true hasilnya false. 
! false hasilnya true.
*/
{
    const poin = 70;
    const rank = 60;

    const nilai = poin > 50;
    const medal = rank > 60; 

    const lulus = nilai && medal ;

    document.writeln('luluskah?'+lulus+'<br>');
}

/*
console.
fitur logging untuk menampilkan info dari aplikasi yang berjalan tanpa mengganggunya.

console.info untuk mbritahu informasi
console.warn
error
table
*/
{
    console.warn('hello');
}

/*
string template adalah cara untuk mensubtitusi data dari luar string ke dalam string. seperti mengambil data variable atau melkakukan operasi matematika.
menggunakan `(backtick)
*/
{
    const name='wildan fajri';
    const house= 'tebet';
    const hobby= 'modelling';
    const template=`Name :${name} ${house} ${hobby}`;

    console.info(template);
}

// kode expression di string template.

{
    const name = 'wildan';
    const value = 100;

    const template = `Name : ${name}, Nilai : ${value>50}`;

    console.info(template);
}

// multiline string
{
    let multiline =
    `seperti menulis
    biasa pada word
    ketika enter, maka
    membuat line baru`;
    
    console.info(multiline);
}

/*
konversi string dan number.
parseInt(string) untuk mengkonversi string ke number bilangan bulat. misal, 1.1 menjadi 1 saja.

parseFloat(string) tuk mengkonversi number ke pecahan.

Number(string) mengkonversi string ke number(bulat/pecahan).

number.toString mengkonversi number ke string.
*/
{
   const value1 = "1";
   const value2 = 1;
   const sum = value1 + value2;
   document.writeln(`${sum}`+"<br>");
//hasilnya 11 karena "1" dibaca string bukan number

    const data1 = parseInt("1");
    const data2 = 1;
    const sum2 = data1 + data2;

    document.writeln(`${sum2}`+"<br>");
}

/*
NaN (Not a Number) data tidak falid, bisa ditolerir dengan parseInt atau parseFloat. Number tidak mentolerir Nan.

isNan(string) utk mengecek Nan atau bukan.
*/  
    const data1 = Number("salah");
    const data3 = 100;
    const sum = data1 + data3;
    document.writeln(`${sum}`+"<br>");

    const data2 = 1;
    document.writeln(`${isNaN(data2)}`+"<br>");

{
    const group1 = 5.1;
    const group2 = 5;

    const hasil = group1 * group2;

    document.writeln(`${'parseInt ='} ${parseInt(hasil)}`+"<br>");
    document.writeln(`${'parseFloat ='} ${parseFloat(hasil)} ${'<br>'}`);

    document.writeln(`${parseInt(group1)} ${'<br>'}`);
}

/*
Tipe Data Array. kumpulan data yang bisa bertambah.
[]
*/
{
    let arrayKosong = [];
    let arrayNama = ['abdul', 'budi', 'cahyo'];
}

/*
cara kerja array. bekerja secara berurutan dan dimulai dari 0(Nol) kemudian 1. urutan array disebut dengan index.
*/
{
    let dataArray= [0,1,2,3,4,5,6]; //panjang array ada 7
}

// menambah array
{
    const names= [];
    names.push('abdul');//data ke 0 adalah abdul
    names.push('cahya', 'budi');

    console.table(names);
}
/*
Operasi Array:
(array=nama arraynya)
array.push(value) utk menambahkan data ke array.
array.length utk mengetahui panjang array
array[index] utk mendapat data, di posisi index
array[index] = value utk mengubah data di posisi array
delete array[index] tuk menghapus array tanpa mengubah posisi index.
*/

const data=['Jakarta', 'Bandung', 'Cirebon', 'Demak'];
data.push('Enim', "fak-fak");
delete data[4];
data[0]= 'Jogja';
data.push(['London', 'Manchester'], 'Brisbane');

console.table(data);
console.info(data.length);
console.info(data[2]);

// data array bisa apa saja, tidak harus string atau number. array juga bisa di dalam array (multidemsional array)

/*
Tipe Data Object.

Associative Array.
!index yang di js berupa angka tidak dapat dirubah menjadi string seperti di php. hal ini bisa menyebabkan bad behavior. Jika dipaksa memasukan data bukan number di index Array dan data tersebut akan berubah menjadi objct.


Tipe Data Object. tipe data yang mirip Array, yg membedakan adalah index pada tipe data objct bisa menggunakan string. index di obcjt ini disebut dengan attributes atau properties, bukan index.
*/
    const person={};
    //mengubah property/attribute
    person['nama']='Anca';
    person['tgl/lahir']='1 januari';
    person['domisili']='Jakarta';
    delete person['domisili'];

    console.table(person);

//membuat object dengan properties

{
    const data= {
        'nama lengkap': 'Abdul',
        asal: 'Jakarta',
        status: 'kawin',
        "tanggal lahir" : "5 oktober 1995", //menulis atribut dengan spasi menggunakan kutip.
        umur: 30
    };

    console.table(data);
    console.info(`Nama : ${data["nama lengkap"]}`);
    console.info(`Asal : ${data.asal}`);
}

/*
if Expression atau Percabangan.
*/
{
    const nilai=80;
    if (nilai >70){ //jika boolean true maka dieksekusi, viceversa.
        document.writeln("<i>Lulus</i><br>")
    }
}

// else expression

{
    const nilai=50;
    if(nilai > 70){
        document.writeln("lulus");
    } else {
        document.writeln('tidak lulus, coba lagi<br>');
    }
}

//else if
{
    const nilai=100;
    if (nilai > 80) {
        document.writeln('a+');
    } else if (nilai > 70){
        document.writeln('a');
    } else {
        document.writeln('b');}
    
}

/* pop up.
alert: pop up peringatan. 
prompt: meminta input string dari pengguna browser. confirm: meminta input boolean dalam bentuk pop up pilihan.
*/
{
   // const name = prompt('tulis nama');
   // alert(`Hallo ${name}`);

   /*const login = confirm('wanna login?');
   if(login) {
    const nama = prompt('insert id');
    alert(`hi ${nama}`);
   } else {
    alert('bye');
   }*/
}

/*
undefined. adalah kata kunci di JS dan sebuah data.
undefined berbeda dengan null di program lain.
*/
{
    /*let name ='asd';
    if(name === undefined){
        alert('UNDEFINED');
    } else {
        alert('defined');
    }*/
}
/*
null. adalah data kosong. Variable yg belum ditambahkan value nya.
*/
{
    /*let name= null;
    if(name === undefined){
        alert('undefined');
    } else if (name === null){
        alert('null');
    } else {
        alert(name);
    }*/
}
/*
switch statement.
kadang kita membutuhkan kondisi sederhana di if statment, seperti hanya menggunakan perbandingan ==.
switch adalah statment percabangan uang sama dengan if namun lebih sederhana cara pembuatannya.
kondisi di switch statement hanya untuk perbanddingan ==.
*/
{
    /*const nilai = 'C';

    switch (nilai){
        case "A":
            document.writeln('<p>100</p>');
            break;
        case "B":
            document.writeln('<p>75</p>');
            break;
        case "C":
            document.writeln('<p>65</p>');
            break;
        default: 
        document.writeln('try again');
    }*/

   const nilai= 90;

    switch (nilai){
        case 100:
            document.writeln('Sempurna');
            break;
        case (nilai > 80):
            document.writeln('Bagus');
            break;
        default:
            document.writeln("coba lagi");
    }
}
/*
Operator Typeof.
utk mengecek type variable
*/
{
    const cekdata = "asd";
const typeData = typeof cekdata;
document.writeln(`${typeData} ${"<br>"}`);
}
/*
Operator in.
berfungsi utk mengetahui apakah sebuah property ada di dalam object atau tidak secara boolean.
bisa juga utk mengecek index di array.
Hanya mengecek ada atau tidak, tidak mengecek value nya. null dan undefined akan tetap ada atau true.
jadi hanya mengecek propertiynya atau variable, bukan value nya.
*/
{
    const person= {
        name: 'Abdul',
        asal: 'London',
    }

    const result = 'umur' in person;
    document.writeln(`${result}`);
}
/*
Ternary Operator. opeerator lebih sederhana dari if statement.
ternary operator terdiri dari kondisi yang dievaluasi, jika menghasilkan true maka nilai pertama diambil, jika false maka nilai kedua diambil.
*/
{
const nilai = 60;
ucapan = nilai >= 75 ? "Lulus" : "coba lagi";

document.writeln(ucapan);
}
/*
Nullish Coalescing Operator. adalah null dan undefined.
mirip dengan ternary operator. Tapi jika bernilai null atau undefined, nilai default lah yang akan diambil.
*/
{
    let parameter;

    let data = parameter;
    data = parameter ?? 'nilai default';

    document.writeln(data);
}




/*END*/
{
document.writeln('<div class="row align-items-center"><p class="text-center">end</p></div>');
}
 </script>

</div>
</body>
</html>
